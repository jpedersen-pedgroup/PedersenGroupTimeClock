@using PedersenGroupTimeClock.Helpers
@using static PedersenGroupTimeClock.Models.Enums
@model IEnumerable<Ticket>
@{
    ViewData["Title"] = "Tickets";

    string GetCollapseId(string clientName) => $"collapse-{clientName.Replace(" ", "-").ToLower()}";
}

<div class="container-fluid px-4">
    <div class="d-flex flex-column flex-sm-row justify-content-between align-items-start align-items-sm-center my-3 my-md-4 gap-2">
        <h2 class="fw-bold mb-0">Ticket Management</h2>
        <a asp-action="Create" class="btn btn-primary">
            <i class="fas fa-plus"></i> New Ticket
        </a>
    </div>

    <!-- Filters -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-white py-3">
            <div class="row g-3">
                <div class="col-12 col-md-6">
                    <div class="input-group">
                        <span class="input-group-text bg-transparent">
                            <i class="fas fa-search text-muted"></i>
                        </span>
                        <input type="text" id="ticketSearch"
                               class="form-control border-start-0"
                               placeholder="Search tickets...">
                    </div>
                </div>
                <div class="col-12 col-md-6">
                    <div class="d-flex gap-2 justify-content-start justify-content-md-end">
                        <select class="form-select" id="statusFilter" style="max-width: 200px;">
                            <option value="">All Statuses</option>
                            @foreach (TicketStatus status in Enum.GetValues(typeof(TicketStatus)))
                            {
                                <option value="@status">@status</option>
                            }
                        </select>
                        <select class="form-select" id="priorityFilter" style="max-width: 200px;">
                            <option value="">All Priorities</option>
                            @foreach (TicketPriority priority in Enum.GetValues(typeof(TicketPriority)))
                            {
                                <option value="@priority">@priority</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Client Cards -->
    <div class="row g-4">
        @foreach (var clientGroup in Model.GroupBy(t => t.Client))
        {
            var collapseId = GetCollapseId(clientGroup.Key.Name);
            var activeTickets = clientGroup.Count(t => t.Status != TicketStatus.Closed);
            var totalBudget = clientGroup.Sum(t => t.Rate != null ? t.Rate.HourlyRate * t.BudgetHours : 0);
            var totalCost = clientGroup.Sum(t => t.Rate != null ? t.Rate.HourlyRate * (decimal)t.TotalHoursSpent : 0);
            var isOverBudget = totalCost > totalBudget;
            var totalBudgetHours = clientGroup.Sum(t => t.BudgetHours);
            var totalHoursSpent = (decimal)clientGroup.Sum(t => t.TotalHoursSpent);  // Cast to decimal
            var percentageUsed = totalBudgetHours > 0 ? totalHoursSpent / totalBudgetHours * 100 : 0;


            <div class="col-12">
                <div class="card client-card">
                    <div class="card-header bg-white py-3">
                        <div class="d-flex justify-content-between align-items-center"
                             role="button" 
                             data-bs-toggle="collapse" 
                             data-bs-target="#@collapseId">
                            <div>
                                <h5 class="mb-0 d-flex align-items-center">
                                    <i class="fas fa-chevron-right me-2 collapse-icon"></i>
                                    @clientGroup.Key.Name
                                    <span class="badge bg-primary ms-2">@activeTickets active</span>
                                </h5>
                            </div>
                            <div class="d-flex gap-3 align-items-center">
                                <div class="text-end">
                                    <div class="small text-muted mb-1">Budget Utilization</div>
                                    <div class="@(isOverBudget ? "text-danger" : "")">
                                        @totalCost.ToString("C0") / @totalBudget.ToString("C0")
                                    </div>
                                </div>
                                <div class="text-end">
                                    <div class="small text-muted mb-1">Hours</div>
                                    <div>
                                        @totalHoursSpent.ToString("F1")h / @totalBudgetHours.ToString("F1")h
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="collapse" id="@collapseId">
                        <div class="card-body">
                            <!-- Client Stats Row -->
                            <div class="row g-3 mb-4">
                                <div class="col-md-3">
                                    <div class="small-stat-card bg-light rounded p-3">
                                        <div class="small text-muted">Active Tickets</div>
                                        <div class="h4 mb-0">@activeTickets</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="small-stat-card bg-light rounded p-3">
                                        <div class="small text-muted">Total Hours</div>
                                        <div class="h4 mb-0">@totalHoursSpent.ToString("F1")h</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="small-stat-card bg-light rounded p-3">
                                        <div class="small text-muted">Budget Used</div>
                                        <div class="h4 mb-0">@percentageUsed.ToString("F1")%</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="small-stat-card bg-light rounded p-3">
                                        <div class="small text-muted">Cost</div>
                                        <div class="h4 mb-0 @(isOverBudget ? "text-danger" : "")">
                                            @totalCost.ToString("C0")
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Progress bar for client total -->
                            <div class="mb-4">
                                @{
                                    var progressClass = percentageUsed switch
                                    {
                                        > 100 => "bg-danger",
                                        > 75 => "bg-warning",
                                        _ => "bg-success"
                                    };
                                }
                                <div class="progress" style="height: 20px;">
                                    <div class="progress-bar @progressClass" 
                                         role="progressbar" 
                                         style="width: @Math.Min(percentageUsed, 100)%"
                                         aria-valuenow="@percentageUsed" 
                                         aria-valuemin="0" 
                                         aria-valuemax="100">
                                        @totalHoursSpent.ToString("F1")h / @totalBudgetHours.ToString("F1")h
                                    </div>
                                </div>
                            </div>
                            <!-- Individual Tickets -->
                            <div class="row g-3">
                                @foreach (var ticket in clientGroup)
                                {
                                    <div class="col-md-6">
                                        <div class="card h-100">
                                            <div class="card-body">
                                                <div class="d-flex justify-content-between align-items-start mb-2">
                                                    <h6 class="card-title mb-0">@ticket.Title</h6>
                                                    <div>
                                                        @{
                                                            var statusBadgeClass = ticket.Status switch
                                                            {
                                                                TicketStatus.New => "primary",
                                                                TicketStatus.InProgress => "warning",
                                                                TicketStatus.OnHold => "info",
                                                                TicketStatus.Resolved => "success",
                                                                TicketStatus.Closed => "secondary",
                                                                _ => "dark"
                                                            };

                                                            var priorityBadgeClass = ticket.Priority switch
                                                            {
                                                                TicketPriority.Critical => "danger",
                                                                TicketPriority.High => "warning",
                                                                TicketPriority.Medium => "info",
                                                                TicketPriority.Low => "success",
                                                                _ => "secondary"
                                                            };
                                                        }
                                                        <span class="badge bg-@statusBadgeClass">@ticket.Status</span>
                                                        <span class="badge bg-@priorityBadgeClass">@ticket.Priority</span>
                                                    </div>
                                                </div>
                                                <p class="text-muted small mb-3">@ticket.Description</p>

                                                <div class="d-flex justify-content-between align-items-center mb-3">
                                                    <div class="small text-muted">
                                                        <i class="far fa-user me-1"></i>
                                                        @(ViewBag.EmployeeNames.ContainsKey(ticket.AssignedTo) ?
                                                            ViewBag.EmployeeNames[ticket.AssignedTo] : "Unassigned")
                                                    </div>
                                                    <div class="d-flex gap-2">
                                                        <div class="timer-controls" data-ticket-id="@ticket.Id">
                                                            <button class="btn btn-sm btn-outline-primary btn-timer"
                                                                    data-ticket-id="@ticket.Id" id="startTaskTimer">
                                                                <i class="fas fa-play"></i>
                                                            </button>
                                                            <span id="timer-@ticket.Id" class="timer-display"></span>
                                                        </div>
                                                        <a asp-action="Edit" asp-route-id="@ticket.Id"
                                                           class="btn btn-sm btn-outline-secondary">
                                                            <i class="fas fa-edit"></i>
                                                        </a>
                                                    </div>
                                                </div>

                                                <!-- Individual ticket progress -->
                                                <div class="progress" style="height: 4px;">
                                                    @{
                                                        var ticketPercentage = ticket.BudgetHours > 0
                                                        ? ((decimal)ticket.TotalHoursSpent / ticket.BudgetHours) * 100
                                                        : 0;
                                                        var ticketProgressClass = ticketPercentage switch
                                                        {
                                                            > 100 => "bg-danger",
                                                            > 75 => "bg-warning",
                                                            _ => "bg-success"
                                                        };
                                                    }
                                                    <div class="progress-bar @ticketProgressClass"
                                                         role="progressbar"
                                                         style="width: @Math.Min(ticketPercentage, 100)%">
                                                    </div>
                                                </div>
                                                <div class="d-flex justify-content-between align-items-center mt-1">
                                                    <small class="text-muted">
                                                        @ticket.TotalHoursSpent.ToString("F1")h / @ticket.BudgetHours.ToString("F1")h
                                                    </small>
                                                    <small class="@(ticket.Rate != null && (decimal)ticket.TotalHoursSpent * ticket.Rate.HourlyRate > ticket.BudgetHours * ticket.Rate.HourlyRate ? "text-danger" : "text-muted")">
                                                        @((ticket.Rate != null ? (ticket.Rate.HourlyRate * (decimal)ticket.TotalHoursSpent).ToString("C0") : "$0"))
                                                    </small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Task Selection Modal -->
<div class="modal fade" id="taskSelectionModal" tabindex="-1" data-bs-backdrop="static">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">What are you working on?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Select Task</label>
                    <select class="form-select" id="taskSelect">
                        <option value="">General Work</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Notes</label>
                    <textarea class="form-control" id="taskNotes" rows="3"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmStartTimer">Start Timer</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .collapse-icon {
            transition: transform 0.2s;
        }

        .collapse.show + .card-body .collapse-icon {
            transform: rotate(90deg);
        }

        .small-stat-card {
            transition: all 0.2s;
        }

            .small-stat-card:hover {
                background-color: #e9ecef !important;
            }

        .card-header[data-bs-toggle="collapse"] {
            cursor: pointer;
        }

            .card-header[data-bs-toggle="collapse"]:hover {
                background-color: #f8f9fa !important;
            }

        /* Enhanced focus effect styles */
        .client-card {
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
        }

            .client-card.faded {
                opacity: 0.25;
                filter: grayscale(100%) blur(1px);
                transform: scale(0.98);
            }

            .client-card.focused {
                opacity: 1;
                filter: grayscale(0) blur(0);
                transform: scale(1.02);
                box-shadow: 0 0.5rem 2rem rgba(0, 0, 0, 0.15);
                z-index: 2;
            }

                /* Add highlight effect */
                .client-card.focused::before {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    border-radius: inherit;
                    pointer-events: none;
                    box-shadow: 0 0 0 2px #0d6efd;
                    opacity: 0.5;
                }

                /* Make header more prominent when focused */
                .client-card.focused .card-header {
                    background-color: #f8f9fa !important;
                }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {

            const clientCards = document.querySelectorAll('.client-card');

            clientCards.forEach(card => {
                const collapse = card.querySelector('.collapse');

                collapse.addEventListener('shown.bs.collapse', function() {
                    // Fade other cards
                    clientCards.forEach(otherCard => {
                        if (otherCard !== card) {
                            otherCard.classList.add('faded');
                        }
                    });
                    // Focus current card
                    card.classList.add('focused');

                    // Smooth scroll to card after it has fully expanded
                    const headerOffset = 100;
                    const cardPosition = card.getBoundingClientRect().top + window.pageYOffset;
                    const offsetPosition = cardPosition - headerOffset;

                    // Set a shorter duration for a faster scroll (e.g., 200ms):
                    smoothScrollTo(offsetPosition, 200);
                });

                collapse.addEventListener('hide.bs.collapse', function() {
                    // Restore all cards
                    clientCards.forEach(otherCard => {
                        otherCard.classList.remove('faded', 'focused');
                    });
                });
            });

        });

        function smoothScrollTo(targetPosition, duration = 300) {
            const startPosition = window.pageYOffset;
            const distance = targetPosition - startPosition;
            const startTime = performance.now();

            function animation(currentTime) {
                const elapsed = currentTime - startTime;
                const progress = Math.min(elapsed / duration, 1); // from 0 to 1

                // Ease in-out, can customize the easing curve:
                const ease = progress < 0.5
                    ? 2 * progress * progress
                    : -1 + (4 - 2 * progress) * progress;

                window.scrollTo(0, startPosition + (distance * ease));

                if (progress < 1) {
                    requestAnimationFrame(animation);
                }
            }

            requestAnimationFrame(animation);
        }

        document.querySelectorAll('[data-bs-toggle="collapse"]').forEach(button => {
            button.addEventListener('click', function() {
                const icon = this.querySelector('.collapse-icon');
                icon.style.transform = this.getAttribute('aria-expanded') === 'true'
                    ? 'rotate(0deg)'
                    : 'rotate(90deg)';
            });
        });

    </script>
}
@* @using PedersenGroupTimeClock.Helpers *@
@* @using static PedersenGroupTimeClock.Models.Enums *@

@* @model IEnumerable<Ticket> *@

@* @{ *@
@*     ViewData["Title"] = "Tickets"; *@
@* } *@

@* <div class="container-fluid px-4"> *@
@*     <div class="d-flex flex-column flex-sm-row justify-content-between align-items-start align-items-sm-center my-3 my-md-4 gap-2"> *@
@*         <h2 class="fw-bold mb-0">Ticket Management</h2> *@
@*         <a asp-action="Create" class="btn btn-primary"> *@
@*             <i class="fas fa-plus"></i> New Ticket *@
@*         </a> *@
@*     </div> *@

@*     <div class="col-lg-6"> *@
@*         <div class="card shadow-sm mb-4"> *@
@*             <div class="card-header bg-white py-3"> *@
@*                 <div class="row g-3"> *@
@*                     <div class="col-12 col-md-6"> *@
@*                         <div class="input-group"> *@
@*                             <span class="input-group-text bg-transparent"> *@
@*                                 <i class="fas fa-search text-muted"></i> *@
@*                             </span> *@
@*                             <input type="text" id="ticketSearch" *@
@*                                    class="form-control border-start-0" *@
@*                                    placeholder="Search tickets..."> *@
@*                         </div> *@
@*                     </div> *@
@*                     <div class="col-12 col-md-6"> *@
@*                         <div class="d-flex gap-2 justify-content-start justify-content-md-end"> *@
@*                             <select class="form-select" id="statusFilter" style="max-width: 200px;"> *@
@*                                 <option value="">All Statuses</option> *@
@*                                 @foreach (TicketStatus status in Enum.GetValues(typeof(TicketStatus))) *@
@*                                 { *@
@*                                     <option value="@status">@status</option> *@
@*                                 } *@
@*                             </select> *@
@*                             <select class="form-select" id="priorityFilter" style="max-width: 200px;"> *@
@*                                 <option value="">All Priorities</option> *@
@*                                 @foreach (TicketPriority priority in Enum.GetValues(typeof(TicketPriority))) *@
@*                                 { *@
@*                                     <option value="@priority">@priority</option> *@
@*                                 } *@
@*                             </select> *@
@*                             <select class="form-select" id="clientFilter" style="max-width: 200px;"> *@
@*                                 <option value="">All Clients</option> *@
@*                                 @if (ViewBag.Clients != null) *@
@*                                 { *@
@*                                     @foreach (var client in ViewBag.Clients) *@
@*                                     { *@
@*                                         <option value="@client.Value">@client.Text</option> *@
@*                                     } *@
@*                                 } *@
@*                             </select> *@
@*                         </div> *@
@*                     </div> *@
@*                 </div> *@
@*             </div> *@
@*         </div> *@

@*         <!-- Ticket items --> *@
@*         <div class="row g-3"> *@
@*             @foreach (var ticket in Model) *@
@*             { *@
@*                 <div class="col-12"> *@
@*                     <div class="card ticket-item" *@
@*                          data-status="@ticket.Status" *@
@*                          data-priority="@ticket.Priority" *@
@*                          data-client-id="@ticket.ClientId"> *@
@*                         <div class="card-body"> *@
@*                             <div class="row g-3"> *@
@*                                 <div class="col-12 col-lg-9"> *@
@*                                     <!-- Ticket header --> *@
@*                                     <div class="d-flex flex-wrap gap-2 align-items-center mb-2"> *@
@*                                         <h5 class="mb-0 me-auto">@ticket.Title</h5> *@
@*                                         @{ *@
@*                                             var statusBadgeClass = ((TicketStatus)ticket.Status) switch *@
@*                                             { *@
@*                                                 TicketStatus.New => "primary", *@
@*                                                 TicketStatus.InProgress => "warning", *@
@*                                                 TicketStatus.OnHold => "info", *@
@*                                                 TicketStatus.Resolved => "success", *@
@*                                                 TicketStatus.Closed => "secondary", *@
@*                                                 _ => "dark" *@
@*                                             }; *@

@*                                             var priorityBadgeClass = ((TicketPriority)ticket.Priority) switch *@
@*                                             { *@
@*                                                 TicketPriority.Low => "success", *@
@*                                                 TicketPriority.Medium => "info", *@
@*                                                 TicketPriority.High => "warning", *@
@*                                                 TicketPriority.Critical => "danger", *@
@*                                                 _ => "secondary" *@
@*                                             }; *@
@*                                         } *@

@*                                         <span class="badge bg-@statusBadgeClass">@ticket.Status</span> *@
@*                                         <span class="badge bg-@priorityBadgeClass">@ticket.Priority</span> *@
@*                                     </div> *@

@*                                     <!-- Ticket description --> *@
@*                                     <p class="text-muted mb-3">@ticket.Description</p> *@

@*                                     <!-- Ticket metadata --> *@
@*                                     <div class="d-flex flex-wrap gap-3 text-muted small mb-3"> *@
@*                                         <div> *@
@*                                             <i class="far fa-user me-2"></i> *@
@*                                             <span>@(ViewBag.EmployeeNames.ContainsKey(ticket.AssignedTo) ? ViewBag.EmployeeNames[ticket.AssignedTo] : "Unassigned")</span> *@
@*                                         </div> *@
@*                                         <div> *@
@*                                             <i class="far fa-building me-2"></i> *@
@*                                             <span>@(ViewBag.ClientNames.ContainsKey(ticket.ClientId) ? ViewBag.ClientNames[ticket.ClientId] : "No Client")</span> *@
@*                                         </div> *@
@*                                         <div> *@
@*                                             <i class="far fa-calendar me-1"></i> *@
@*                                             @ticket.CreatedAt.ToString("MMM dd, yyyy") *@
@*                                         </div> *@
@*                                     </div> *@

@*                                     <!-- Progress bar --> *@
@*                                     <div class="progress mb-2" style="height: 20px;"> *@
@*                                         @{ *@
@*                                             var percentageUsed = ticket.BudgetHours > 0 *@
@*                                             ? (decimal)ticket.TotalHoursSpent / ticket.BudgetHours * 100 *@
@*                                             : 0; *@
@*                                             var progressClass = percentageUsed switch *@
@*                                             { *@
@*                                                 > 100 => "bg-danger", *@
@*                                                 > 75 => "bg-warning", *@
@*                                                 _ => "bg-success" *@
@*                                             }; *@
@*                                         } *@
@*                                         <div class="progress-bar @progressClass" *@
@*                                              role="progressbar" *@
@*                                              style="width: @Math.Min(percentageUsed, 100)%" *@
@*                                              aria-valuenow="@percentageUsed" *@
@*                                              aria-valuemin="0" *@
@*                                              aria-valuemax="100"> *@
@*                                             @ticket.TotalHoursSpent.ToString("F1")h / @ticket.BudgetHours.ToString("F1")h *@
@*                                         </div> *@
@*                                     </div> *@

@*                                     <!-- Cost info --> *@
@*                                     <div class="mt-2 text-muted small"> *@
@*                                         <span class="me-3"> *@
@*                                             <i class="fas fa-dollar-sign me-1"></i> *@
@*                                             Rate: @(ticket.Rate?.HourlyRate.ToString("C2") ?? "$0.00")/h *@
@*                                         </span> *@
@*                                         <span class="me-3"> *@
@*                                             @{ *@
@*                                                 var budget = ticket.Rate != null ? (ticket.Rate.HourlyRate * ticket.BudgetHours) : 0; *@
@*                                                 var actualCost = ticket.Rate != null ? (ticket.Rate.HourlyRate * (decimal)ticket.TotalHoursSpent) : 0; *@
@*                                                 var isOverBudget = actualCost > budget; *@
@*                                             } *@
@*                                             <i class="fas fa-coins me-1"></i> *@
@*                                             <span class="@(isOverBudget ? "text-danger" : "text-muted")"> *@
@*                                                 Actual Cost: @((ticket.Rate != null ? (ticket.Rate.HourlyRate * (decimal)ticket.TotalHoursSpent).ToString("C2") : "$0.00")) *@
@*                                             </span> *@
@*                                         </span> *@
@*                                         <span> *@
@*                                             <i class="fas fa-coins me-1"></i> *@
@*                                             Budget: @((ticket.Rate != null ? (ticket.BudgetHours * (decimal)ticket.Rate.HourlyRate).ToString("C2") : "$0.00")) *@
@*                                         </span> *@
@*                                     </div> *@
@*                                 </div> *@

@*                                 <div class="col-12 col-lg-3"> *@
@*                                     <div class="d-flex flex-row flex-lg-column gap-3 justify-content-start justify-content-lg-end"> *@
@*                                         <!-- Timer controls --> *@
@*                                         <div class="timer-controls" data-ticket-id="@ticket.Id"> *@
@*                                             <div class="d-flex gap-2 align-items-center"> *@
@*                                                 <button class="btn btn-outline-primary btn-timer" *@
@*                                                         data-ticket-id="@ticket.Id"> *@
@*                                                     <i class="fas fa-play"></i> *@
@*                                                 </button> *@
@*                                                 <span id="timer-@ticket.Id" class="timer-display"></span> *@
@*                                                 <span id="total-time-@ticket.Id" *@
@*                                                       class="total-time" *@
@*                                                       data-total="@ticket.TotalHoursSpent"> *@
@*                                                     @ticket.TotalHoursSpent.ToString("F1")h *@
@*                                                 </span> *@
@*                                             </div> *@
@*                                         </div> *@

@*                                         <!-- Action buttons --> *@
@*                                         <div class="btn-group"> *@
@*                                             <a asp-action="Edit" asp-route-id="@ticket.Id" *@
@*                                                class="btn btn-outline-secondary"> *@
@*                                                 <i class="fas fa-edit"></i> *@
@*                                             </a> *@
@*                                             <button type="button" class="btn btn-outline-info" *@
@*                                                     data-bs-toggle="modal" *@
@*                                                     data-bs-target="#ticketModal" *@
@*                                                     data-ticket-id="@ticket.Id"> *@
@*                                                 <i class="fas fa-eye"></i> *@
@*                                             </button> *@
@*                                         </div> *@
@*                                     </div> *@
@*                                 </div> *@
@*                             </div> *@
@*                         </div> *@
@*                     </div> *@
@*                 </div> *@
@*             } *@
@*         </div> *@
@*     </div> *@
@* </div> *@

@* <!-- Ticket Details Modal --> *@
@* <div class="modal fade" id="ticketModal" tabindex="-1"> *@
@*     <div class="modal-dialog modal-dialog-scrollable modal-lg"> *@
@*         <div class="modal-content"> *@
@*             <div class="modal-header"> *@
@*                 <h5 class="modal-title">Ticket Details</h5> *@
@*                 <div class="d-flex gap-2 mx-3"> *@
@*                     <div id="modalTimerControls"></div> *@
@*                 </div> *@
@*                 <button type="button" class="btn-close" data-bs-dismiss="modal"></button> *@
@*             </div> *@
@*             <div class="modal-body"> *@
@*                 <!-- Content loaded dynamically --> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* </div> *@

<!-- Task Selection Modal -->
@* <div class="modal fade" id="taskSelectionModal" tabindex="-1"> *@
@*     <div class="modal-dialog"> *@
@*         <div class="modal-content"> *@
@*             <div class="modal-header"> *@
@*                 <h5 class="modal-title">What are you working on?</h5> *@
@*                 <button type="button" class="btn-close" data-bs-dismiss="modal"></button> *@
@*             </div> *@
@*             <div class="modal-body"> *@
@*                 <div class="mb-3"> *@
@*                     <label class="form-label">Select Task</label> *@
@*                     <select class="form-select" id="taskSelect"> *@
@*                         <option value="">General Work</option> *@
@*                     </select> *@
@*                 </div> *@
@*                 <div class="mb-3"> *@
@*                     <label class="form-label">Notes</label> *@
@*                     <textarea class="form-control" id="taskNotes" rows="3"></textarea> *@
@*                 </div> *@
@*             </div> *@
@*             <div class="modal-footer"> *@
@*                 <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button> *@
@*                 <button type="button" class="btn btn-primary" id="startTaskTimer">Start Timer</button> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* </div>

@* @section Styles { *@
@*     <style> *@
@*         .hover-bg-light:hover { *@
@*             background-color: rgba(0,0,0,0.03); *@
@*             transition: background-color 0.2s; *@
@*         } *@

@*         .btn-timer.active { *@
@*             background-color: var(--bs-danger); *@
@*             color: white; *@
@*             border-color: var(--bs-danger); *@
@*         } *@

@*             .btn-timer.active i::before { *@
@*                 content: "\f04c"; *@
@*             } *@
@*     </style> *@
@* } *@

@* @section Scripts { *@
@*     <script> *@
@*         $(document).ready(function () { *@
@*             // Search functionality *@
@*             $('#ticketSearch').on('keyup', function () { *@
@*                 const value = $(this).val().toLowerCase(); *@
@*                 $('.ticket-item').filter(function () { *@
@*                     $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1) *@
@*                 }); *@
@*             }); *@

@*             // Status filter *@
@*             $('#statusFilter').change(function () { *@
@*                 filterTickets(); *@
@*             }); *@

@*             // Priority filter *@
@*             $('#priorityFilter').change(function () { *@
@*                 filterTickets(); *@
@*             }); *@

@*             // Client filter *@
@*             $('#clientFilter').change(function () { *@
@*                 filterTickets(); *@
@*             }); *@

@*             function filterTickets() { *@
@*                 const status = $('#statusFilter').val().toLowerCase(); *@
@*                 const priority = $('#priorityFilter').val().toLowerCase(); *@
@*                 const client = $('#clientFilter').val(); *@

@*                 $('.ticket-item').each(function () { *@
@*                     const ticketStatus = $(this).find('.badge').first().text().toLowerCase(); *@
@*                     const ticketPriority = $(this).find('.badge').last().text().toLowerCase(); *@
@*                     const ticketClient = $(this).data('client-id'); *@

@*                     const statusMatch = !status || ticketStatus === status; *@
@*                     const priorityMatch = !priority || ticketPriority === priority; *@
@*                     const clientMatch = !client || ticketClient === client; *@

@*                     $(this).toggle(statusMatch && priorityMatch && clientMatch); *@
@*                 }); *@
@*             } *@

@*             // Modal loading *@
@*             $('#ticketModal').on('show.bs.modal', function (event) { *@
@*                 const button = $(event.relatedTarget); *@
@*                 const ticketId = button.data('ticket-id'); *@
@*                 const modal = $(this); *@

@*                 // Load ticket details *@
@*                 $.get(`/Tickets/Details/${ticketId}`, function (data) { *@
@*                     modal.find('.modal-body').html(data); *@

@*                     // First clear existing controls, then clone new ones *@
@*                     modal.find('#modalTimerControls').empty(); *@
@*                     const timerControls = $(`.timer-controls[data-ticket-id="${ticketId}"]`).clone(true); *@
@*                     modal.find('#modalTimerControls').html(timerControls); *@

@*                     // Sync timer state if active *@
@*                     if (activeTimer.ticketId === ticketId) { *@
@*                         updateTimerDisplay(); *@
@*                     } *@
@*                 }); *@
@*             }); *@
@*         }); *@
@*     </script> *@
@* } *@