@using PedersenGroupTimeClock.Helpers
@using static PedersenGroupTimeClock.Models.Enums
@model IEnumerable<Ticket>
@{
    ViewData["Title"] = "Tickets";

    string GetCollapseId(string clientName) => $"collapse-{clientName.Replace(" ", "-").ToLower()}";
}

<div class="container-fluid px-4">
    <div class="d-flex flex-column flex-sm-row justify-content-between align-items-start align-items-sm-center my-3 my-md-4 gap-2">
        <h2 class="fw-bold mb-0">Ticket Management</h2>
        <a asp-action="Create" class="btn btn-primary">
            <i class="fas fa-plus"></i> New Ticket
        </a>
    </div>

    <!-- Filters -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-white py-3">
            <div class="row g-3">
                <div class="col-12 col-md-6">
                    <div class="input-group">
                        <span class="input-group-text bg-transparent">
                            <i class="fas fa-search text-muted"></i>
                        </span>
                        <input type="text" id="ticketSearch"
                               class="form-control border-start-0"
                               placeholder="Search tickets...">
                    </div>
                </div>
                <div class="col-12 col-md-6">
                    <div class="d-flex gap-2 justify-content-start justify-content-md-end">
                        <select class="form-select" id="statusFilter" style="max-width: 200px;">
                            <option value="">All Statuses</option>
                            @foreach (TicketStatus status in Enum.GetValues(typeof(TicketStatus)))
                            {
                                <option value="@status">@status</option>
                            }
                        </select>
                        <select class="form-select" id="priorityFilter" style="max-width: 200px;">
                            <option value="">All Priorities</option>
                            @foreach (TicketPriority priority in Enum.GetValues(typeof(TicketPriority)))
                            {
                                <option value="@priority">@priority</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Client Cards -->
    <div class="row g-4">
        @foreach (var clientGroup in Model.GroupBy(t => t.Client))
        {
            var collapseId = GetCollapseId(clientGroup.Key.Name);
            var activeTickets = clientGroup.Count(t => t.Status != TicketStatus.Closed);
            var totalBudget = clientGroup.Sum(t => t.Rate != null ? t.Rate.HourlyRate * t.BudgetHours : 0);
            var totalCost = clientGroup.Sum(t => t.Rate != null ? t.Rate.HourlyRate * (decimal)t.TotalHoursSpent : 0);
            var isOverBudget = totalCost > totalBudget;
            var totalBudgetHours = clientGroup.Sum(t => t.BudgetHours);
            var totalHoursSpent = (decimal)clientGroup.Sum(t => t.TotalHoursSpent);  // Cast to decimal
            var percentageUsed = totalBudgetHours > 0 ? totalHoursSpent / totalBudgetHours * 100 : 0;


            <div class="col-12">
                <div class="card client-card">
                    <div class="card-header bg-white py-3">
                        <div class="d-flex justify-content-between align-items-center"
                             role="button" 
                             data-bs-toggle="collapse" 
                             data-bs-target="#@collapseId">
                            <div>
                                <h5 class="mb-0 d-flex align-items-center">
                                    <i class="fas fa-chevron-right me-2 collapse-icon"></i>
                                    @clientGroup.Key.Name
                                    <span class="badge bg-primary ms-2">@activeTickets active</span>
                                </h5>
                            </div>
                            <div class="d-flex gap-3 align-items-center">
                                <div class="text-end">
                                    <div class="small text-muted mb-1">Budget Utilization</div>
                                    <div class="@(isOverBudget ? "text-danger" : "")">
                                        @totalCost.ToString("C0") / @totalBudget.ToString("C0")
                                    </div>
                                </div>
                                <div class="text-end">
                                    <div class="small text-muted mb-1">Hours</div>
                                    <div>
                                        @totalHoursSpent.ToString("F1")h / @totalBudgetHours.ToString("F1")h
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="collapse" id="@collapseId">
                        <div class="card-body">
                            <!-- Client Stats Row -->
                            <div class="row g-3 mb-4">
                                <div class="col-md-3">
                                    <div class="small-stat-card bg-light rounded p-3">
                                        <div class="small text-muted">Active Tickets</div>
                                        <div class="h4 mb-0">@activeTickets</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="small-stat-card bg-light rounded p-3">
                                        <div class="small text-muted">Total Hours</div>
                                        <div class="h4 mb-0">@totalHoursSpent.ToString("F1")h</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="small-stat-card bg-light rounded p-3">
                                        <div class="small text-muted">Budget Used</div>
                                        <div class="h4 mb-0">@percentageUsed.ToString("F1")%</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="small-stat-card bg-light rounded p-3">
                                        <div class="small text-muted">Cost</div>
                                        <div class="h4 mb-0 @(isOverBudget ? "text-danger" : "")">
                                            @totalCost.ToString("C0")
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Progress bar for client total -->
                            <div class="mb-4">
                                @{
                                    var progressClass = percentageUsed switch
                                    {
                                        > 100 => "bg-danger",
                                        > 75 => "bg-warning",
                                        _ => "bg-success"
                                    };
                                }
                                <div class="progress" style="height: 20px;">
                                    <div class="progress-bar @progressClass" 
                                         role="progressbar" 
                                         style="width: @Math.Min(percentageUsed, 100)%"
                                         aria-valuenow="@percentageUsed" 
                                         aria-valuemin="0" 
                                         aria-valuemax="100">
                                        @totalHoursSpent.ToString("F1")h / @totalBudgetHours.ToString("F1")h
                                    </div>
                                </div>
                            </div>
                            <!-- Individual Tickets -->
                            <div class="row g-3">
                                @foreach (var ticket in clientGroup)
                                {
                                    <div class="col-md-6">
                                        <div class="card h-100">
                                            <div class="card-body">
                                                <div class="d-flex justify-content-between align-items-start mb-2">
                                                    <h6 class="card-title mb-0">@ticket.Title</h6>
                                                    <div>
                                                        @{
                                                            var statusBadgeClass = ticket.Status switch
                                                            {
                                                                TicketStatus.New => "primary",
                                                                TicketStatus.InProgress => "warning",
                                                                TicketStatus.OnHold => "info",
                                                                TicketStatus.Resolved => "success",
                                                                TicketStatus.Closed => "secondary",
                                                                _ => "dark"
                                                            };

                                                            var priorityBadgeClass = ticket.Priority switch
                                                            {
                                                                TicketPriority.Critical => "danger",
                                                                TicketPriority.High => "warning",
                                                                TicketPriority.Medium => "info",
                                                                TicketPriority.Low => "success",
                                                                _ => "secondary"
                                                            };
                                                        }
                                                        <span class="badge bg-@statusBadgeClass">@ticket.Status</span>
                                                        <span class="badge bg-@priorityBadgeClass">@ticket.Priority</span>
                                                    </div>
                                                </div>
                                                <p class="text-muted small mb-3">@ticket.Description</p>

                                                <div class="d-flex justify-content-between align-items-center mb-3">
                                                    <div class="small text-muted">
                                                        <i class="far fa-user me-1"></i>
                                                        @(ViewBag.EmployeeNames.ContainsKey(ticket.AssignedTo) ?
                                                            ViewBag.EmployeeNames[ticket.AssignedTo] : "Unassigned")
                                                    </div>
                                                    <div class="d-flex gap-2">
                                                        <div class="timer-controls" data-ticket-id="@ticket.Id">
                                                            <button class="btn btn-sm btn-outline-primary btn-timer"
                                                                    data-ticket-id="@ticket.Id" id="startTaskTimer">
                                                                <i class="fas fa-play"></i>
                                                            </button>
                                                            <span id="timer-@ticket.Id" class="timer-display"></span>
                                                        </div>
                                                        <a asp-action="Edit" asp-route-id="@ticket.Id"
                                                           class="btn btn-sm btn-outline-secondary">
                                                            <i class="fas fa-edit"></i>
                                                        </a>
                                                    </div>
                                                </div>

                                                <!-- Individual ticket progress -->
                                                <div class="progress" style="height: 4px;">
                                                    @{
                                                        var ticketPercentage = ticket.BudgetHours > 0
                                                        ? ((decimal)ticket.TotalHoursSpent / ticket.BudgetHours) * 100
                                                        : 0;
                                                        var ticketProgressClass = ticketPercentage switch
                                                        {
                                                            > 100 => "bg-danger",
                                                            > 75 => "bg-warning",
                                                            _ => "bg-success"
                                                        };
                                                    }
                                                    <div class="progress-bar @ticketProgressClass"
                                                         role="progressbar"
                                                         style="width: @Math.Min(ticketPercentage, 100)%">
                                                    </div>
                                                </div>
                                                <div class="d-flex justify-content-between align-items-center mt-1">
                                                    <small class="text-muted">
                                                        @ticket.TotalHoursSpent.ToString("F1")h / @ticket.BudgetHours.ToString("F1")h
                                                    </small>
                                                    <small class="@(ticket.Rate != null && (decimal)ticket.TotalHoursSpent * ticket.Rate.HourlyRate > ticket.BudgetHours * ticket.Rate.HourlyRate ? "text-danger" : "text-muted")">
                                                        @((ticket.Rate != null ? (ticket.Rate.HourlyRate * (decimal)ticket.TotalHoursSpent).ToString("C0") : "$0"))
                                                    </small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Task Selection Modal -->
<div class="modal fade" id="taskSelectionModal" tabindex="-1" data-bs-backdrop="static">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">What are you working on?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Select Task</label>
                    <select class="form-select" id="taskSelect">
                        <option value="">General Work</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Notes</label>
                    <textarea class="form-control" id="taskNotes" rows="3"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmStartTimer">Start Timer</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .collapse-icon {
            transition: transform 0.2s;
        }

        .collapse.show + .card-body .collapse-icon {
            transform: rotate(90deg);
        }

        .small-stat-card {
            transition: all 0.2s;
        }

            .small-stat-card:hover {
                background-color: #e9ecef !important;
            }

        .card-header[data-bs-toggle="collapse"] {
            cursor: pointer;
        }

            .card-header[data-bs-toggle="collapse"]:hover {
                background-color: #f8f9fa !important;
            }

        /* Enhanced focus effect styles */
        .client-card {
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
        }

            .client-card.faded {
                opacity: 0.25;
                filter: grayscale(100%) blur(1px);
                transform: scale(0.98);
            }

            .client-card.focused {
                opacity: 1;
                filter: grayscale(0) blur(0);
                transform: scale(1.02);
                box-shadow: 0 0.5rem 2rem rgba(0, 0, 0, 0.15);
                z-index: 2;
            }

                /* Add highlight effect */
                .client-card.focused::before {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    border-radius: inherit;
                    pointer-events: none;
                    box-shadow: 0 0 0 2px #0d6efd;
                    opacity: 0.5;
                }

                /* Make header more prominent when focused */
                .client-card.focused .card-header {
                    background-color: #f8f9fa !important;
                }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {

            const clientCards = document.querySelectorAll('.client-card');

            clientCards.forEach(card => {
                const collapse = card.querySelector('.collapse');

                collapse.addEventListener('shown.bs.collapse', function() {
                    // Fade other cards
                    clientCards.forEach(otherCard => {
                        if (otherCard !== card) {
                            otherCard.classList.add('faded');
                        }
                    });
                    // Focus current card
                    card.classList.add('focused');

                    // Smooth scroll to card after it has fully expanded
                    const headerOffset = 100;
                    const cardPosition = card.getBoundingClientRect().top + window.pageYOffset;
                    const offsetPosition = cardPosition - headerOffset;

                    // Set a shorter duration for a faster scroll (e.g., 200ms):
                    smoothScrollTo(offsetPosition, 200);
                });

                collapse.addEventListener('hide.bs.collapse', function() {
                    // Restore all cards
                    clientCards.forEach(otherCard => {
                        otherCard.classList.remove('faded', 'focused');
                    });
                });
            });

        });

        function smoothScrollTo(targetPosition, duration = 300) {
            const startPosition = window.pageYOffset;
            const distance = targetPosition - startPosition;
            const startTime = performance.now();

            function animation(currentTime) {
                const elapsed = currentTime - startTime;
                const progress = Math.min(elapsed / duration, 1); // from 0 to 1

                // Ease in-out, can customize the easing curve:
                const ease = progress < 0.5
                    ? 2 * progress * progress
                    : -1 + (4 - 2 * progress) * progress;

                window.scrollTo(0, startPosition + (distance * ease));

                if (progress < 1) {
                    requestAnimationFrame(animation);
                }
            }

            requestAnimationFrame(animation);
        }

        document.querySelectorAll('[data-bs-toggle="collapse"]').forEach(button => {
            button.addEventListener('click', function() {
                const icon = this.querySelector('.collapse-icon');
                icon.style.transform = this.getAttribute('aria-expanded') === 'true'
                    ? 'rotate(0deg)'
                    : 'rotate(90deg)';
            });
        });

    </script>
    <script>
                // Event handlers
        document.addEventListener('DOMContentLoaded', function () {
            // Handle timer button clicks
            document.querySelectorAll('.btn-timer').forEach(button => {
                button.addEventListener('click', function (e) {
                    console.log('Timer button clicked:', this.dataset.ticketId);
                    const ticketId = this.dataset.ticketId;
                    if (this.classList.contains('active')) {
                        stopTimer();
                    } else {
                        startTimer(ticketId);
                    }
                });
            });

            // Handle modal start timer button
            document.getElementById('confirmStartTimer').addEventListener('click', function () {
                console.log('Confirm start timer clicked');
                const taskId = document.getElementById('taskSelect').value;
                const notes = document.getElementById('taskNotes').value;

                const modal = bootstrap.Modal.getInstance(document.getElementById('taskSelectionModal'));
                if (modal) {
                    modal.hide();
                    $('.modal-backdrop').remove();
                }

                startTimer(activeTimer.ticketId, {
                    taskId: taskId,
                    notes: notes
                });
            });

            // Add pause button functionality
            document.querySelectorAll('.btn-pause').forEach(button => {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    if (activeTimer.interval && !activeTimer.isPaused) {
                        pauseTimer();
                    } else {
                        resumeTimer();
                    }
                });
            });

            // Handle page unload
            // window.addEventListener('beforeunload', function () {
            //     if (activeTimer.interval) {
            //         stopTimer();
            //     }
            // });

            $('#startTaskTimer').click(function () {
                selectedTask = $('#taskSelect').val();
                selectedTaskNotes = $('#taskNotes').val();
                $('#taskSelectionModal').modal('hide');

                // Start the timer with the selected task
                startTimer(activeTimer.ticketId, {
                    taskId: selectedTask,
                    notes: selectedTaskNotes
                });
            });
        });
    </script>
}
